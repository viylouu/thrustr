this is a "how to" on thrustr engine


-------       initialization and rendering       -------


you need to call the "handle.init" function to start up the game (thrustr.basic namespace)
you can call this anywhere, but i recommend calling it in the "Main" function

handle.init has 2 parameters:
    1. a start function
    2. a render function

the start function is simple, 
just make a function, called whatever, no parameters

the render function is slightly more complicated,
you need to add 1 parameter (wow so hard) with a type of ICanvas (SimulationFramework.Drawing namespace)


-------       the "intro"       -------


the intro is the little thing in the bottom left when you start your project
you can disable this by setting handle.do_intro
you can also change the font by setting handle.intro_font


-------       fontie       -------


fontie is an easy to use "font renderer" (in quotes because it cant handle ttf or otf)
it is in the namespace "thrustr.basic"

--  usage  --

you can create new fonts by creating a variable of type font, and assigning it to font.gen_font()

font.gen_font() accepts 4 parameters
    1. the texture
    2. the character set
    3. the distance from the top of the sprite and the top of the actual characters excluding accents (OPTIONAL)
    4. the distance from the top of the sprite and the bottom of the actual characters excluding parts that hang down (OPTIONAL)

the texture is just an atlas of all of the characters, layed out horizontally, with the same spacing
the character set is a string that contains all of the characters in the texture, in order of how they appear

you can also use font.gen_font_wpath()

it also has 4 parameters
    1. the texture
    2. a path
    3. the distance from the top of the sprite and the top of the actual characters excluding accents (OPTIONAL)
    4. the distance from the top of the sprite and the bottom of the actual characters excluding parts that hang down (OPTIONAL)

the texture is the same as font.gen_font()
the path is the directory of a charater set file

the only difference between these is that the genfont_wpath function reads the data from a file instead of hardcoding it


you can render fonts by calling the ICanvas.f_DrawText() function (ICanvas being a class from SimulationFramework.Drawing that is provided in the render function)

ICanvas.f_DrawText() accepts 6/7 parameters
    1. the text
    2. the position (can be a Vector2 or 2 floats)
    3. the alignment (OPTIONAL)
    4. the scale (OPTIONAL)
    5. the font (OPTIONAL)
    6. the tint (can be a Color or a ColorF) (OPTIONAL)

currently there is 1 helper function that fontie provides: fontie.predicttextwidth

it accepts 3 parameters
    1. the text
    2. the scale (OPTIONAL)
    3. the font (OPTIONAL)

this returns the width in pixels of some text when rendered in the specified font


-------       stackr       -------

stackr is a sprite-stacking library i made to make sprite-stacking easier
if you do not know what sprite-stacking is, here is some text i copied from https://community.flowlab.io/t/sprite-sandwich-a-guide-to-spritestacking/40779

"Spritestacking is a way to create top-down visuals in a 2D game engine. It is the only easy way to 
make 3D looking objects in 2D only engines, you can use it to impress friends that don’t know how to 
do it, it is in most cases more comfy than 3D models on your computer, and geometric complexity doesn’t 
increase computer strain unlike 3D models. The catch, of course, is that unless you get really advanced, 
you cannot create a lighting system akin to a regular 3D game."

stackr is in the "thrustr.stackr" namespace

how to use stackr:

first you need to populate your scene
you can do this with the stackr.add_obj() function

--  adding an object  --

the add_obj function has 3 parameters
    1. the object
    2. the position (optional)
    3. the rotation (optional)

the object is an ssobj

what is an ssobj you ask?
an ssobj is a class that stores a sprite-stacked object

it has 4 variables:
    the stack texture
    the size of the base layer
    the layer count
    the tint

you can create an ssobj using stackr.create_obj()

this has 3 parameters
    1. the stack texture
    2. the size of the base
    3. the tint (optional)

the stack texture is a texture of each layer, this store a horizontal slice of each layer
the layers in the texture are stored vertically, the top is the top, the bottom is the bottom

the size of the base is just a Vector2 that stores the size of a single slice, x being x, z being y

the tint is a Color that you can specify to tint the stack

ok, back to the addobj function

the position is a Vector3 that stores it's worldspace position in pixels
the rotation is a float that stores it's worldspace rotation in radians

--  rendering  --

you can render the scene using 1 of 2 functions

ICanvas.s_RenderScene()
ICanvas.s_RenderSceneAndClear()

ICanvas.s_RenderSceneAndClear() just calls the render function, and clears the scene

ICanvas.s_RenderScene() renders the scene
this renders using a camera, which you can set

the camera can be set with 2 variables
    1. the position: "cam"
    2. the rotation: "camrot"

the position is a Vector3 in pixels
the rotation is a float in radians

the camera is automatically centered